@use 'sass:color';
@use 'src/scss/utilities';

@mixin button3d(
  $primaryColor: utilities.$batigansMawOrange,
  $secondaryColor: utilities.$effThisOrange,
  $topLeftRadius: 4rem,
  $topRightRadius: 4rem,
  $bottomLeftRadius: 4rem,
  $bottomRightRadius: 4rem
) {
  $innerStripeWidth: 2px;
  $innerStripeOffset: -6px;
  $innerStripeChange: 0px;
  $buttonHeight: 8px;
  $buttonShadowLength: 6px;
  $pressAmount: 4px;
  $sideShadowStyle: 0px 4px 2px 0px
    color.scale($secondaryColor, $blackness: 15%);
  $sideStyle: $sideShadowStyle, 0px $buttonHeight 0px 0px $secondaryColor;
  $sideStyleHover: $sideShadowStyle,
    0px $buttonHeight - $pressAmount 0px 0px $secondaryColor;
  $bottomShadowColor: rgba(utilities.$black, 0.25);

  $easingFunction: cubic-bezier(0.87, 0, 0.13, 1);
  $easingTime: 0.15s;

  // inside button
  background-color: $primaryColor;
  outline: $innerStripeWidth solid $secondaryColor;
  outline-offset: $innerStripeOffset;
  border-top-left-radius: $topLeftRadius;
  border-top-right-radius: $topRightRadius;
  border-bottom-left-radius: $bottomLeftRadius;
  border-bottom-right-radius: $bottomRightRadius;

  // bottom side
  box-shadow: $sideStyle;

  // funky state overrides
  &:focus {
    outline: $innerStripeWidth solid $secondaryColor !important;
    outline-offset: $innerStripeOffset;
    box-shadow: $sideStyle;
  }
  &:focus {
    outline: $innerStripeWidth solid $secondaryColor !important;
    outline-offset: $innerStripeOffset;
    box-shadow: $sideStyle;

    // bottom side
    box-shadow: $sideStyle;
  }
  &:active {
    background-color: $primaryColor;
  }
  &:active:focus {
    box-shadow: $sideStyle;
  }
  &:active:focus:hover {
    // bottom side
    box-shadow: $sideStyleHover;
  }

  // transition
  transform: translate3d(0, 0, 0);
  transition: transform $easingTime $easingFunction,
    box-shadow $easingTime $easingFunction;

  // shadow
  &:after {
    transition: all $easingTime $easingFunction;
    content: '';
    position: absolute;
    top: $buttonHeight / 2;
    bottom: -$buttonHeight;
    left: 0;
    right: 0;
    border-top-left-radius: $topLeftRadius;
    border-top-right-radius: $topRightRadius;
    border-bottom-left-radius: $bottomLeftRadius;
    border-bottom-right-radius: $bottomRightRadius;
    box-shadow: 0px $buttonShadowLength 0px 0px $bottomShadowColor;
  }

  &:hover {
    background-color: $primaryColor;

    // transition
    transform: translate3d(0, $pressAmount, 0);

    // bottom side
    box-shadow: $sideStyleHover;

    // shadow
    &:after {
      transform: translate3d(0, -$pressAmount, 0);
      box-shadow: 0px $buttonShadowLength - $pressAmount 0px 0px
        $bottomShadowColor;
    }
  }
}

.button {
  // basics
  position: relative;
  display: inline-flex;
  padding: 1rem 2rem;
  font-family: utilities.$headingFont;
  font-weight: bold;
  color: utilities.$white;
  border: none;

  @include button3d();

  &:hover:not(:disabled) {
    cursor: pointer;
  }
  &:disabled {
    opacity: 0.65;
  }

  &:any-link {
    text-decoration: none;
    color: utilities.$white;
  }
}
